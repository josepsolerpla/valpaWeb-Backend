// Code generated by Prisma (prisma@1.29.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  allowedCalendar: (where?: AllowedCalendarWhereInput) => Promise<boolean>;
  authed: (where?: AuthedWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  allowedCalendar: (
    where: AllowedCalendarWhereUniqueInput
  ) => AllowedCalendarPromise;
  allowedCalendars: (
    args?: {
      where?: AllowedCalendarWhereInput;
      orderBy?: AllowedCalendarOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<AllowedCalendar>;
  allowedCalendarsConnection: (
    args?: {
      where?: AllowedCalendarWhereInput;
      orderBy?: AllowedCalendarOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => AllowedCalendarConnectionPromise;
  authed: (where: AuthedWhereUniqueInput) => AuthedPromise;
  autheds: (
    args?: {
      where?: AuthedWhereInput;
      orderBy?: AuthedOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Authed>;
  authedsConnection: (
    args?: {
      where?: AuthedWhereInput;
      orderBy?: AuthedOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => AuthedConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAllowedCalendar: (
    data: AllowedCalendarCreateInput
  ) => AllowedCalendarPromise;
  updateAllowedCalendar: (
    args: {
      data: AllowedCalendarUpdateInput;
      where: AllowedCalendarWhereUniqueInput;
    }
  ) => AllowedCalendarPromise;
  updateManyAllowedCalendars: (
    args: {
      data: AllowedCalendarUpdateManyMutationInput;
      where?: AllowedCalendarWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertAllowedCalendar: (
    args: {
      where: AllowedCalendarWhereUniqueInput;
      create: AllowedCalendarCreateInput;
      update: AllowedCalendarUpdateInput;
    }
  ) => AllowedCalendarPromise;
  deleteAllowedCalendar: (
    where: AllowedCalendarWhereUniqueInput
  ) => AllowedCalendarPromise;
  deleteManyAllowedCalendars: (
    where?: AllowedCalendarWhereInput
  ) => BatchPayloadPromise;
  createAuthed: (data: AuthedCreateInput) => AuthedPromise;
  updateAuthed: (
    args: { data: AuthedUpdateInput; where: AuthedWhereUniqueInput }
  ) => AuthedPromise;
  updateManyAutheds: (
    args: { data: AuthedUpdateManyMutationInput; where?: AuthedWhereInput }
  ) => BatchPayloadPromise;
  upsertAuthed: (
    args: {
      where: AuthedWhereUniqueInput;
      create: AuthedCreateInput;
      update: AuthedUpdateInput;
    }
  ) => AuthedPromise;
  deleteAuthed: (where: AuthedWhereUniqueInput) => AuthedPromise;
  deleteManyAutheds: (where?: AuthedWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  allowedCalendar: (
    where?: AllowedCalendarSubscriptionWhereInput
  ) => AllowedCalendarSubscriptionPayloadSubscription;
  authed: (
    where?: AuthedSubscriptionWhereInput
  ) => AuthedSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type AuthedOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "tokenGoogle_ASC"
  | "tokenGoogle_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type AllowedCalendarOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "idCalendar_ASC"
  | "idCalendar_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Role = "ROOT" | "ADMIN" | "USER";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "password_ASC"
  | "password_DESC"
  | "email_ASC"
  | "email_DESC"
  | "role_ASC"
  | "role_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "slug_ASC"
  | "slug_DESC"
  | "image_ASC"
  | "image_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AllowedCalendarWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  idCalendar?: String;
}>;

export interface AuthedWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  tokenGoogle?: String;
  tokenGoogle_not?: String;
  tokenGoogle_in?: String[] | String;
  tokenGoogle_not_in?: String[] | String;
  tokenGoogle_lt?: String;
  tokenGoogle_lte?: String;
  tokenGoogle_gt?: String;
  tokenGoogle_gte?: String;
  tokenGoogle_contains?: String;
  tokenGoogle_not_contains?: String;
  tokenGoogle_starts_with?: String;
  tokenGoogle_not_starts_with?: String;
  tokenGoogle_ends_with?: String;
  tokenGoogle_not_ends_with?: String;
  AND?: AuthedWhereInput[] | AuthedWhereInput;
  OR?: AuthedWhereInput[] | AuthedWhereInput;
  NOT?: AuthedWhereInput[] | AuthedWhereInput;
}

export interface AllowedCalendarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  idCalendar?: String;
  idCalendar_not?: String;
  idCalendar_in?: String[] | String;
  idCalendar_not_in?: String[] | String;
  idCalendar_lt?: String;
  idCalendar_lte?: String;
  idCalendar_gt?: String;
  idCalendar_gte?: String;
  idCalendar_contains?: String;
  idCalendar_not_contains?: String;
  idCalendar_starts_with?: String;
  idCalendar_not_starts_with?: String;
  idCalendar_ends_with?: String;
  idCalendar_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  from_every?: AuthedWhereInput;
  from_some?: AuthedWhereInput;
  from_none?: AuthedWhereInput;
  AND?: AllowedCalendarWhereInput[] | AllowedCalendarWhereInput;
  OR?: AllowedCalendarWhereInput[] | AllowedCalendarWhereInput;
  NOT?: AllowedCalendarWhereInput[] | AllowedCalendarWhereInput;
}

export type AuthedWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  tokenGoogle?: String;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
  email?: String;
}>;

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  role?: Role;
  role_not?: Role;
  role_in?: Role[] | Role;
  role_not_in?: Role[] | Role;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  slug?: String;
  slug_not?: String;
  slug_in?: String[] | String;
  slug_not_in?: String[] | String;
  slug_lt?: String;
  slug_lte?: String;
  slug_gt?: String;
  slug_gte?: String;
  slug_contains?: String;
  slug_not_contains?: String;
  slug_starts_with?: String;
  slug_not_starts_with?: String;
  slug_ends_with?: String;
  slug_not_ends_with?: String;
  image?: String;
  image_not?: String;
  image_in?: String[] | String;
  image_not_in?: String[] | String;
  image_lt?: String;
  image_lte?: String;
  image_gt?: String;
  image_gte?: String;
  image_contains?: String;
  image_not_contains?: String;
  image_starts_with?: String;
  image_not_starts_with?: String;
  image_ends_with?: String;
  image_not_ends_with?: String;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface AllowedCalendarCreateInput {
  idCalendar?: String;
  from?: AuthedCreateManyInput;
}

export interface AuthedCreateManyInput {
  create?: AuthedCreateInput[] | AuthedCreateInput;
  connect?: AuthedWhereUniqueInput[] | AuthedWhereUniqueInput;
}

export interface AuthedCreateInput {
  tokenGoogle: String;
}

export interface AllowedCalendarUpdateInput {
  idCalendar?: String;
  from?: AuthedUpdateManyInput;
}

export interface AuthedUpdateManyInput {
  create?: AuthedCreateInput[] | AuthedCreateInput;
  update?:
    | AuthedUpdateWithWhereUniqueNestedInput[]
    | AuthedUpdateWithWhereUniqueNestedInput;
  upsert?:
    | AuthedUpsertWithWhereUniqueNestedInput[]
    | AuthedUpsertWithWhereUniqueNestedInput;
  delete?: AuthedWhereUniqueInput[] | AuthedWhereUniqueInput;
  connect?: AuthedWhereUniqueInput[] | AuthedWhereUniqueInput;
  set?: AuthedWhereUniqueInput[] | AuthedWhereUniqueInput;
  disconnect?: AuthedWhereUniqueInput[] | AuthedWhereUniqueInput;
  deleteMany?: AuthedScalarWhereInput[] | AuthedScalarWhereInput;
  updateMany?:
    | AuthedUpdateManyWithWhereNestedInput[]
    | AuthedUpdateManyWithWhereNestedInput;
}

export interface AuthedUpdateWithWhereUniqueNestedInput {
  where: AuthedWhereUniqueInput;
  data: AuthedUpdateDataInput;
}

export interface AuthedUpdateDataInput {
  tokenGoogle?: String;
}

export interface AuthedUpsertWithWhereUniqueNestedInput {
  where: AuthedWhereUniqueInput;
  update: AuthedUpdateDataInput;
  create: AuthedCreateInput;
}

export interface AuthedScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  tokenGoogle?: String;
  tokenGoogle_not?: String;
  tokenGoogle_in?: String[] | String;
  tokenGoogle_not_in?: String[] | String;
  tokenGoogle_lt?: String;
  tokenGoogle_lte?: String;
  tokenGoogle_gt?: String;
  tokenGoogle_gte?: String;
  tokenGoogle_contains?: String;
  tokenGoogle_not_contains?: String;
  tokenGoogle_starts_with?: String;
  tokenGoogle_not_starts_with?: String;
  tokenGoogle_ends_with?: String;
  tokenGoogle_not_ends_with?: String;
  AND?: AuthedScalarWhereInput[] | AuthedScalarWhereInput;
  OR?: AuthedScalarWhereInput[] | AuthedScalarWhereInput;
  NOT?: AuthedScalarWhereInput[] | AuthedScalarWhereInput;
}

export interface AuthedUpdateManyWithWhereNestedInput {
  where: AuthedScalarWhereInput;
  data: AuthedUpdateManyDataInput;
}

export interface AuthedUpdateManyDataInput {
  tokenGoogle?: String;
}

export interface AllowedCalendarUpdateManyMutationInput {
  idCalendar?: String;
}

export interface AuthedUpdateInput {
  tokenGoogle?: String;
}

export interface AuthedUpdateManyMutationInput {
  tokenGoogle?: String;
}

export interface UserCreateInput {
  name: String;
  password: String;
  email: String;
  role?: Role;
  slug?: String;
  image?: String;
}

export interface UserUpdateInput {
  name?: String;
  password?: String;
  email?: String;
  role?: Role;
  slug?: String;
  image?: String;
}

export interface UserUpdateManyMutationInput {
  name?: String;
  password?: String;
  email?: String;
  role?: Role;
  slug?: String;
  image?: String;
}

export interface AllowedCalendarSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AllowedCalendarWhereInput;
  AND?:
    | AllowedCalendarSubscriptionWhereInput[]
    | AllowedCalendarSubscriptionWhereInput;
  OR?:
    | AllowedCalendarSubscriptionWhereInput[]
    | AllowedCalendarSubscriptionWhereInput;
  NOT?:
    | AllowedCalendarSubscriptionWhereInput[]
    | AllowedCalendarSubscriptionWhereInput;
}

export interface AuthedSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AuthedWhereInput;
  AND?: AuthedSubscriptionWhereInput[] | AuthedSubscriptionWhereInput;
  OR?: AuthedSubscriptionWhereInput[] | AuthedSubscriptionWhereInput;
  NOT?: AuthedSubscriptionWhereInput[] | AuthedSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface AllowedCalendar {
  id: ID_Output;
  idCalendar?: String;
  createdAt: DateTimeOutput;
}

export interface AllowedCalendarPromise
  extends Promise<AllowedCalendar>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  idCalendar: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  from: <T = FragmentableArray<Authed>>(
    args?: {
      where?: AuthedWhereInput;
      orderBy?: AuthedOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AllowedCalendarSubscription
  extends Promise<AsyncIterator<AllowedCalendar>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  idCalendar: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  from: <T = Promise<AsyncIterator<AuthedSubscription>>>(
    args?: {
      where?: AuthedWhereInput;
      orderBy?: AuthedOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface Authed {
  id: ID_Output;
  tokenGoogle: String;
}

export interface AuthedPromise extends Promise<Authed>, Fragmentable {
  id: () => Promise<ID_Output>;
  tokenGoogle: () => Promise<String>;
}

export interface AuthedSubscription
  extends Promise<AsyncIterator<Authed>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  tokenGoogle: () => Promise<AsyncIterator<String>>;
}

export interface AllowedCalendarConnection {
  pageInfo: PageInfo;
  edges: AllowedCalendarEdge[];
}

export interface AllowedCalendarConnectionPromise
  extends Promise<AllowedCalendarConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AllowedCalendarEdge>>() => T;
  aggregate: <T = AggregateAllowedCalendarPromise>() => T;
}

export interface AllowedCalendarConnectionSubscription
  extends Promise<AsyncIterator<AllowedCalendarConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AllowedCalendarEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAllowedCalendarSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AllowedCalendarEdge {
  node: AllowedCalendar;
  cursor: String;
}

export interface AllowedCalendarEdgePromise
  extends Promise<AllowedCalendarEdge>,
    Fragmentable {
  node: <T = AllowedCalendarPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AllowedCalendarEdgeSubscription
  extends Promise<AsyncIterator<AllowedCalendarEdge>>,
    Fragmentable {
  node: <T = AllowedCalendarSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAllowedCalendar {
  count: Int;
}

export interface AggregateAllowedCalendarPromise
  extends Promise<AggregateAllowedCalendar>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAllowedCalendarSubscription
  extends Promise<AsyncIterator<AggregateAllowedCalendar>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AuthedConnection {
  pageInfo: PageInfo;
  edges: AuthedEdge[];
}

export interface AuthedConnectionPromise
  extends Promise<AuthedConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AuthedEdge>>() => T;
  aggregate: <T = AggregateAuthedPromise>() => T;
}

export interface AuthedConnectionSubscription
  extends Promise<AsyncIterator<AuthedConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AuthedEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAuthedSubscription>() => T;
}

export interface AuthedEdge {
  node: Authed;
  cursor: String;
}

export interface AuthedEdgePromise extends Promise<AuthedEdge>, Fragmentable {
  node: <T = AuthedPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AuthedEdgeSubscription
  extends Promise<AsyncIterator<AuthedEdge>>,
    Fragmentable {
  node: <T = AuthedSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAuthed {
  count: Int;
}

export interface AggregateAuthedPromise
  extends Promise<AggregateAuthed>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAuthedSubscription
  extends Promise<AsyncIterator<AggregateAuthed>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  name: String;
  password: String;
  email: String;
  role: Role;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  slug?: String;
  image?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  email: () => Promise<String>;
  role: () => Promise<Role>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  slug: () => Promise<String>;
  image: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  slug: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AllowedCalendarSubscriptionPayload {
  mutation: MutationType;
  node: AllowedCalendar;
  updatedFields: String[];
  previousValues: AllowedCalendarPreviousValues;
}

export interface AllowedCalendarSubscriptionPayloadPromise
  extends Promise<AllowedCalendarSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AllowedCalendarPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AllowedCalendarPreviousValuesPromise>() => T;
}

export interface AllowedCalendarSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AllowedCalendarSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AllowedCalendarSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AllowedCalendarPreviousValuesSubscription>() => T;
}

export interface AllowedCalendarPreviousValues {
  id: ID_Output;
  idCalendar?: String;
  createdAt: DateTimeOutput;
}

export interface AllowedCalendarPreviousValuesPromise
  extends Promise<AllowedCalendarPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  idCalendar: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface AllowedCalendarPreviousValuesSubscription
  extends Promise<AsyncIterator<AllowedCalendarPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  idCalendar: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AuthedSubscriptionPayload {
  mutation: MutationType;
  node: Authed;
  updatedFields: String[];
  previousValues: AuthedPreviousValues;
}

export interface AuthedSubscriptionPayloadPromise
  extends Promise<AuthedSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AuthedPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AuthedPreviousValuesPromise>() => T;
}

export interface AuthedSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AuthedSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AuthedSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AuthedPreviousValuesSubscription>() => T;
}

export interface AuthedPreviousValues {
  id: ID_Output;
  tokenGoogle: String;
}

export interface AuthedPreviousValuesPromise
  extends Promise<AuthedPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  tokenGoogle: () => Promise<String>;
}

export interface AuthedPreviousValuesSubscription
  extends Promise<AsyncIterator<AuthedPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  tokenGoogle: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  password: String;
  email: String;
  role: Role;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  slug?: String;
  image?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  email: () => Promise<String>;
  role: () => Promise<Role>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  slug: () => Promise<String>;
  image: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  slug: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Role",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Authed",
    embedded: false
  },
  {
    name: "AllowedCalendar",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
